{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "../src/Map.svelte"
  ],
  "sourcesContent": [
    "<script>\n\texport let time\n\texport let id\n\texport let censusTracts\n\texport let col\n\texport let prevCol = false\n\texport let posChange\n\n\timport {onMount} from 'svelte'\n\timport jenks from './helpers/jenks.js'\n\timport tract2town from './helpers/tract2town.js'\n\timport comma from './helpers/comma.js'\n\timport colors from './helpers/colors.js'\n\timport isNumeric from './helpers/isnumeric.js'\n\n\timport {showChange, data, ann, jenksBreaks, geo2data, geojsonPath} from './stores.js'\n\n\tlet map\n\tlet geojsonLayer\n\n\tlet getColor = function(geo) {\n\n\t\tlet val = geo[col]\n\t\tlet valPrev = prevCol ? geo[prevCol] : false\n\n\t\tif ($showChange && valPrev) {\n\t\t\tif (isNumeric(valPrev) && isNumeric(val)) {\n\t\t\t\tlet change = val - valPrev\n\t\t\t\treturn (change > 0 && posChange) || (change < 0 && !posChange)\n\t\t\t\t\t? 'green'\n\t\t\t\t\t: change == 0 ? 'blue' : 'red'\n\t\t\t} else {\n\t\t\t\treturn 'silver'\n\t\t\t}\n\t\t}\n\n\t\tif (val === '-') {\n\t\t\treturn '#cccccc'\n\t\t}\n\n\t\tif (val[val.length - 1] === '+') {\n\t\t\treturn colors[4]\n\t\t}\n\n\t\tfor (let i in $jenksBreaks) {\n\t\t\tif (i > 0) {\n\t\t\t\tif (val <= $jenksBreaks[i]) {\n\t\t\t\t\treturn colors[i-1]\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn '#cccccc'\n\t}\n\n\tconst resizeMaps = function() {\n\t\tmap.fitBounds(geojsonLayer.getBounds())\n\t}\n\n\tlet initMap = async function() {\n\t\tmap = L.map(id, {\n\t\t\tcenter: [41.33, -72.65],\n\t\t\tzoom: 9,\n\t\t\tzoomControl: false,\n\t\t\tscrollWheelZoom: false,\n\t\t\tattributionControl: false,\n\t\t});\n\t\tmap.keyboard.disable()\n\t\tmap.doubleClickZoom.enable()\n\t\tmap.dragging.disable()\n\t}\n\n\tvar reloadGeojson = async function() {\n\t\tconst res = await fetch($geojsonPath)\n\t\tconst json = await res.json()\n\n\t\tif (geojsonLayer) {\n\t\t\tmap.removeLayer(geojsonLayer)\n\t\t}\n\n\t\tgeojsonLayer = L.geoJson(json, {\n\t\t\tonEachFeature: function(f, l) {\n\t\t\t\tl.on({\n\t\t\t\t\tmouseover: function(e) {\n\t\t\t\t\t\tann.update(x => e.target.feature.properties.name)\n\t\t\t\t\t},\n\t\t\t\t\tmouseout: function(e) {\n\t\t\t\t\t\tann.update(x => '')\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t},\n\t\t}).addTo(map)\n\n\t\tresizeMaps()\n\n\t\tgeo2data.subscribe(g2d => {\n\n\t\t\tif (id == 'map-time2') {\n\t\t\t\tshowChange.subscribe(val => {\n\t\t\t\t\tgeojsonLayer.eachLayer(layer => {\n\t\t\t\t\t\tlayer.setStyle({\n\t\t\t\t\t\t\tfillColor: getColor(g2d[layer.feature.properties.name]),\n\t\t\t\t\t\t\tfillOpacity: 1,\n\t\t\t\t\t\t\tcolor: 'white',\n\t\t\t\t\t\t\tweight: 1\n\t\t\t\t\t\t})\n\t\t\t\t\t})\n\t\t\t\t})\n\t\t\t}\n\n\t\t\tgeojsonLayer.eachLayer(layer => {\n\t\t\t\tlayer.setStyle({\n\t\t\t\t\tfillColor: getColor(g2d[layer.feature.properties.name]),\n\t\t\t\t\tfillOpacity: 1,\n\t\t\t\t\tcolor: 'white',\n\t\t\t\t\tweight: 1\n\t\t\t\t})\n\t\t\t})\n\t\t})\n\n\n\n\t}\n\n\t$: if ($geojsonPath && map) {\n\t\treloadGeojson()\n\t}\n\n\tonMount(initMap)\n\n\twindow.addEventListener('resize', resizeMaps)\n\n</script>\n\n\n<style>\n\t:global(.leaflet-container) {\n\t\tbackground-color: rgba(0,0,0,0) !important;\n\t}\n\n\t:global(.leaflet-interactive:hover) {\n\t\tfill-opacity: 0.5;\n\t\tcolor: green;\n\t}\n</style>\n\n\n<div id=\"{id}\" class=\"w-100 h-100\"></div>\n"
  ],
  "names": [],
  "mappings": "AAwIS,kBAAkB,AAAE,CAAC,AAC5B,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,AAC3C,CAAC,AAEO,0BAA0B,AAAE,CAAC,AACpC,YAAY,CAAE,GAAG,CACjB,KAAK,CAAE,KAAK,AACb,CAAC"
}